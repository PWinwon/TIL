########################################################
# 과제 풀이

# tree = {
#     '030': ['054','002','045'],
#     '054': ['001','009'],
#     '002': [],
#     '045': ['123'],
#     '001': [],
#     '123': [],
#     '009': ['125','130'],
#     '125': [],
#     '130': []
#
# }
#
# def make_tree(node, level):
#     if len(tree[node]) == 0 : # 리프노드일때
#         print()
#         return
#
#     for child in tree[node]:
#         if tree[node].index(child) != 0 : # 부모랑 바로 연결되지 않은경우
#             for i in range(2*level+1):
#                 print("     ",end = '')
#
#         if len(tree[node]) == 1: # 자식노드가 하나다
#             print("---",end = '')
#
#             #자식노드가 여러개
#         elif tree[node].index(child) == len(tree[node]) - 1: # 마지막 자식노드
#             print("--L", end = '')
#         else:
#             print("--+",end = '')
#
#         print("--[" + child + "]",end =  '')
#         make_tree(child,level + 1)
#
# print('[030]',end ='')
# make_tree('030', 0)


########################################################
# 연습문제 2 - 교수님 풀이

# MAP = { '0' : '0000',
#         '1' : '0001',
#         '2' : '0010',
#         '3' : '0011',
#         '4' : '0100',
#         '5' : '0101',
#         '6' : '0110',
#         '7' : '0111',
#         '8' : '1000',
#         '9' : '1001',
#         'A' : '1010',
#         'B' : '1011',
#         'C' : '1100',
#         'D' : '1101',
#         'E' : '1110',
#         'F' : '1111',
#         }
#
#
# s = '0F97A3'
# new_s = ""
#
# for i in range(len(s)):
#     new_s += MAP[s[i]]
#
# L = len(new_s) - len(new_s) % 7
# for i in range(0, L  ,7):
#     # new_s 를 7개씩 처리하기
#     print(int(new_s[i: i + 7],2), end = ' ')
#
# #[L] ~ [len(new_s) - 1]
# if L != len(new_s):
#     print(int(new_s[L:len(new_s)],2))


########################################################
# 연습문제 3

# LARGER_TEN = ['A', 'B', 'C', 'D', 'E', 'F']
#
# PWD = {
#     '001101': 0,
#     '010011': 1,
#     '111011': 2,
#     '110001': 3,
#     '100011': 4,
#     '110111': 5,
#     '001011': 6,
#     '111101': 7,
#     '011001': 8,
#     '101111': 9,
# }
#
#
# def hex_to_bin(s):
#     temp = ''
#     if s in LARGER_TEN:
#         tar = ord(s) - ord('A') + 10
#     else:
#         tar = ord(s) - ord('0')
#     for i in range(4):
#         if tar & (1 << i):
#             temp = '1' + temp
#         else:
#             temp = '0' + temp
#     return temp
#
#
# def find_pattern(s):
#     if s in PWD.keys():
#         return PWD[s]
#     else:
#         return -1
#
#
# numbers = '0269FAC9A0'
# result = ''
# res = []
# for num in numbers:
#     result += hex_to_bin(num)
# print(result)
# idx = len(result) - 1
# while idx >= 0:
#     if result[idx] == '1':
#         r = find_pattern(result[idx-5:idx+1])
#         if r > -1:
#             res.append(r)
#             idx -= 6
#             continue
#     idx -= 1
# print(', '.join(map(str, res[::-1])))

########################################################
# 연습문제 3 - 교수님 풀이

# amho = {
#     '001101' : 0,
#     '010011' : 1,
#     '111011' : 2,
#     '110001' : 3,
#     '100011' : 4,
#     '110111' : 5,
#     '001011' : 6,
#     '111101' : 7,
#     '011001' : 8,
#     '101111' : 9
# }
# MAP = {
#     '0' : '0000',
#     '1' : '0001',
#     '2' : '0010',
#     '3' : '0011',
#     '4' : '0100',
#     '5' : '0101',
#     '6' : '0110',
#     '7' : '0111',
#     '8' : '1000',
#     '9' : '1001',
#     'A' : '1010',
#     'B' : '1011',
#     'C' : '1100',
#     'D' : '1101',
#     'E' : '1110',
#     'F' : '1111',
# }
#
#
# s = '0269FAC9A0'
# new_s = '' # 이진수로 만들기
# for i in range(len(s)):
#     new_s += MAP[s[i]]
#
# de = -1
# a = 0
# while a < len(new_s):
#     key = new_s[a : a + 6]
#     if key in amho :
#         print(amho[key], end = ',')
#         a += 6
#     else :
#         a += 1

########################################################
# 과제 swea_1240 - 교수님 풀이

# s = '01110110110001011101101100010110001000110100100110111011'  # 56 개
# # 암호 비트 패턴이 7 자리 -> 총 8개가 나온다.
# pwd = {
#     '0001101': 0,
#     '0011001': 1,
#     '0010011': 2,
#     '0111101': 3,
#     '0100011': 4,
#     '0110001': 5,
#     '0101111': 6,
#     '0111011': 7,
#     '0110111': 8,
#     '0001011': 9,
# }
# # 0111011(7) 0110001(5) 0111011(7) 0110001(5) 0110001(5) 0001101(0) 0010011(2) 0111011(7)
# # [7,5,7,5,5,0,2,7] 이거 만들기
# # 검증 확인하기
#
# lst = []
# for i in range(0, len(s), 7):
#     key = s[i:i + 7]
#     lst.append(pwd[key])
#
# de = -1
#
# sum = 0
# for i in range(len(lst)):
#     if (i + 1) % 2 == 0:
#         sum += lst[i]
#     else:
#         sum += lst[i] * 3
#
# # 올바른 검증 코드인지?
# if sum % 10 == 0:
#     print("올바르다")
#
# else:
#     print("안올바르다")
